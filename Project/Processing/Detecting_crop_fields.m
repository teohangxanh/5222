%%
clc; clear all; close all;
image_files = dir('*.jpg');
k = 6;
for index = 1:length(image_files)
    title_extension = strsplit(image_files(index).name, '.');
    title = title_extension{1};
    % Iterate images
    I = imread(image_files(index).name);
    % Use k-means
    Ikm = Km(I,k);    
    imwrite(Ikm, sprintf('%s_Kmeans_%d.jpg', title, k));
    % Color threshold to amplify woods color
    thresholded = detect_woods(Ikm);
    imwrite(thresholded, sprintf('%s_Kmeans_%d_thresholded.jpg', title, k));
    % Set non-zero pixels to 255
    processed_img = thresholded;
    processed_img(processed_img > 0) = 255;
    imwrite(processed_img, sprintf('%s_Kmeans_%d_thresholded_processed.jpg', title, k));
end
%% k-means
function Ikm = Km(I,K) 
    %% K-means Segmentation (option: K (Number of Clusters))
    I = im2double(I);
    F = reshape(I,size(I,1)*size(I,2),3);                 % Color Features
    %% K-means
    CENTS = F( ceil(rand(K,1)*size(F,1)) ,:);             % Cluster Centers
    DAL   = zeros(size(F,1),K+2);                         % Distances and Labels
    KMI   = 10;                                           % K-means Iteration
    for n = 1:KMI
       for i = 1:size(F,1)
          for j = 1:K  
            DAL(i,j) = norm(F(i,:) - CENTS(j,:));      
          end
          [Distance CN] = min(DAL(i,1:K));                % 1:K are Distance from Cluster Centers 1:K 
          DAL(i,K+1) = CN;                                % K+1 is Cluster Label
          DAL(i,K+2) = Distance;                          % K+2 is Minimum Distance
       end
       for i = 1:K
          A = (DAL(:,K+1) == i);                          % Cluster K Points
          CENTS(i,:) = mean(F(A,:));                      % New Cluster Centers
          if sum(isnan(CENTS(:))) ~= 0                    % If CENTS(i,:) Is Nan Then Replace It With Random Point
             NC = find(isnan(CENTS(:,1)) == 1);           % Find Nan Centers
             for Ind = 1:size(NC,1)
             CENTS(NC(Ind),:) = F(randi(size(F,1)),:);
             end
          end
       end
    end
    
    X = zeros(size(F));
    for i = 1:K
        idx = find(DAL(:,K+1) == i);
        X(idx,:) = repmat(CENTS(i,:),size(idx,1),1); 
    end
    Ikm = reshape(X,size(I,1),size(I,2),3);
end
%% color thresholding
function maskedRGBImage = detect_woods(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 17-Oct-2022
%------------------------------------------------------

I = RGB * 255;

% Define thresholds for channel 1 based on histogram settings
channel1Min = 38.000;
channel1Max = 255.000;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 70.000;
channel2Max = 255.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 59.000;
channel3Max = 255.000;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end